/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/Animated Woman.glb -o src/components/AnimatedWoman.jsx -r public
*/

import * as THREE from 'three';
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { useAnimations, useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame, useGraph } from '@react-three/fiber';
import { SkeletonUtils } from 'three/examples/jsm/Addons.js';
import { Character, GLTFResult, WomenActions } from './types';
// import { Vector3 } from 'three';

const MOVEMENT_SPEED = 0.032;

interface GLTFAction extends THREE.AnimationClip {
  name: WomenActions;
}

type WomenProps = JSX.IntrinsicElements['group'] & Partial<Character>;

export const AnimatedWoman = ({
  hairColor = 'green',
  topColor = 'pink',
  bottomColor = 'brown',
  ...props
}: WomenProps) => {
  const initialPosition = useMemo(() => props.position, []);
  const group = useRef<THREE.Group>(null);
  const { scene, materials, animations } = useGLTF(
    '/models/women.glb'
  ) as GLTFResult;
  // Skinned meshes cannot be re-used in threejs without cloning them
  // useGraph creates two flat object collections for nodes and materials
  //   const { nodes } = useGraph(clone) as GLTFResult['nodes'];
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const graph = useGraph(clone);
  const nodes = graph.nodes as GLTFResult['nodes'];
  const { actions } = useAnimations(animations, group);

  const [animation, setAnimation] = useState<WomenActions>(
    'CharacterArmature|Idle'
  );

  useEffect(() => {
    actions[animation]?.reset().fadeIn(0.32).play();
    return () => {
      actions[animation]?.fadeOut(0.32);
    };
  }, [animation]);

  useFrame(() => {
    if (!group.current) return;
    if (!initialPosition) return;

    let targetPosition = props.position || initialPosition;

    console.log(targetPosition);
    if (
      group.current.position.distanceTo(targetPosition as THREE.Vector3Like) >
      0.1
    ) {
      const direction = group.current.position
        .clone()
        .sub(targetPosition as THREE.Vector3Like)
        .normalize()
        .multiplyScalar(MOVEMENT_SPEED);
      group.current.position.sub(direction);
      group.current.lookAt(targetPosition as THREE.Vector3);
      setAnimation('CharacterArmature|Run');
    } else {
      setAnimation('CharacterArmature|Idle');
    }
  });

  //   useFrame(() => {
  //     if (!group.current) return;
  //     if (!position) return;
  //     if (typeof position === 'number') {
  //       return;
  //     }
  //     const targetPosition: THREE.Vector3Like = {
  //       x: position.x,
  //       y: position[1],
  //       z: position[2]
  //     };
  //     if (group.current.position.distanceTo(targetPosition) > 0.1) {
  //       const direction = group.current.position
  //         .clone()
  //         .sub(targetPosition)
  //         .normalize()
  //         .multiplyScalar(MOVEMENT_SPEED);
  //       group.current.position.sub(direction);
  //       group.current.lookAt(props.position);
  //       setAnimation('CharacterArmature|Run');
  //     } else {
  //       setAnimation('CharacterArmature|Idle');
  //     }
  //   });

  return (
    <group ref={group} {...props} position={initialPosition} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="CharacterArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Root} />
          </group>
          <group name="Formad_Head" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Formad_Head_1"
              geometry={nodes.Formad_Head_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Formad_Head_1.skeleton}
            />
            <skinnedMesh
              name="Formad_Head_2"
              geometry={nodes.Formad_Head_2.geometry}
              material={materials.Red}
              skeleton={nodes.Formad_Head_2.skeleton}
            />
            <skinnedMesh
              name="Formad_Head_3"
              geometry={nodes.Formad_Head_3.geometry}
              material={materials.Brown}
              skeleton={nodes.Formad_Head_3.skeleton}
            />
          </group>
          <group name="Formal_Body" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Formal_Body_1"
              geometry={nodes.Formal_Body_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Formal_Body_1.skeleton}
            />
            <skinnedMesh
              name="Formal_Body_2"
              geometry={nodes.Formal_Body_2.geometry}
              material={materials.LimeGreen}
              skeleton={nodes.Formal_Body_2.skeleton}
            />
            <skinnedMesh
              name="Formal_Body_3"
              geometry={nodes.Formal_Body_3.geometry}
              material={materials.Gold}
              skeleton={nodes.Formal_Body_3.skeleton}
            />
          </group>
          <group name="Formal_Feet" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Formal_Feet_1"
              geometry={nodes.Formal_Feet_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Formal_Feet_1.skeleton}
            />
            <skinnedMesh
              name="Formal_Feet_2"
              geometry={nodes.Formal_Feet_2.geometry}
              material={materials.Red}
              skeleton={nodes.Formal_Feet_2.skeleton}
            />
          </group>
          <group name="Formal_Legs" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Formal_Legs_1"
              geometry={nodes.Formal_Legs_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Formal_Legs_1.skeleton}
            />
            <skinnedMesh
              name="Formal_Legs_2"
              geometry={nodes.Formal_Legs_2.geometry}
              material={materials.LimeGreen}
              skeleton={nodes.Formal_Legs_2.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
};

useGLTF.preload('/models/Animated Woman.glb');
