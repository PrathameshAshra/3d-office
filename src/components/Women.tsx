/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 women.glb -t 
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useAnimations, useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';
// import { Vector3 } from 'three';
import { usePlayer } from '../store/player';

type GLTFResult = GLTF & {
  nodes: {
    Formad_Head_1: THREE.SkinnedMesh;
    Formad_Head_2: THREE.SkinnedMesh;
    Formad_Head_3: THREE.SkinnedMesh;
    Formal_Body_1: THREE.SkinnedMesh;
    Formal_Body_2: THREE.SkinnedMesh;
    Formal_Body_3: THREE.SkinnedMesh;
    Formal_Feet_1: THREE.SkinnedMesh;
    Formal_Feet_2: THREE.SkinnedMesh;
    Formal_Legs_1: THREE.SkinnedMesh;
    Formal_Legs_2: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    Skin: THREE.MeshStandardMaterial;
    Red: THREE.MeshStandardMaterial;
    Brown: THREE.MeshStandardMaterial;
    LimeGreen: THREE.MeshStandardMaterial;
    Gold: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export type WomenActions =
  | 'CharacterArmature|Death'
  | 'CharacterArmature|Gun_Shoot'
  | 'CharacterArmature|HitRecieve'
  | 'CharacterArmature|HitRecieve_2'
  | 'CharacterArmature|Idle'
  | 'CharacterArmature|Idle_Gun'
  | 'CharacterArmature|Idle_Gun_Pointing'
  | 'CharacterArmature|Idle_Gun_Shoot'
  | 'CharacterArmature|Idle_Neutral'
  | 'CharacterArmature|Idle_Sword'
  | 'CharacterArmature|Interact'
  | 'CharacterArmature|Kick_Left'
  | 'CharacterArmature|Kick_Right'
  | 'CharacterArmature|Punch_Left'
  | 'CharacterArmature|Punch_Right'
  | 'CharacterArmature|Roll'
  | 'CharacterArmature|Run'
  | 'CharacterArmature|Run_Back'
  | 'CharacterArmature|Run_Left'
  | 'CharacterArmature|Run_Right'
  | 'CharacterArmature|Run_Shoot'
  | 'CharacterArmature|Sword_Slash'
  | 'CharacterArmature|Walk'
  | 'CharacterArmature|Wave';
interface GLTFAction extends THREE.AnimationClip {
  name: WomenActions;
}
// type ContextType = Record<
//   string,
//   React.ForwardRefExoticComponent<
//     JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
//   >
// >;
// const startPoint = new Vector3(0, 0, 0);
// const endPoint = new Vector3(4, 0, 4);
// const speed = 0.2; // Speed of the character

export function Women(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null);

  const { nodes, materials, animations } = useGLTF(
    'public/models/women.glb'
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  // Zustand state for position and progress
  const position = usePlayer((state) => state.position);
  const animation = usePlayer((state) => state.animationState);
  // const setPosition = usePlayer((state) => state.setPosition);
  // const progress = usePlayer((state) => state.progress);
  // const setProgress = usePlayer((state) => state.setProgress);
  useFrame(() => {
    const animate = actions[animation];
    if (animate) {
      animate.play();
    }
    // actions[animation].play();
    // if (group.current) {
    //   // Calculate the next position

    //   // Update the character's position using Zustand

    //   // Update the progress using Zustand
    //   if (progress < 1) {
    //     const nextPosition = new Vector3(position[0], position[1], position[2])
    //       .clone()
    //       .lerp(new Vector3(position[0], position[1], position[2]), progress);

    //     setPosition(nextPosition.x, nextPosition.y, nextPosition.z);
    //     setProgress(progress + speed * delta);
    //     actions["CharacterArmature|Walk"]?.play();
    //   } else {
    //     // Optionally reset progress to loop the movement
    //     setProgress(1);
    //     actions["CharacterArmature|Walk"]?.stop();
    //   }
    // }
    // Play the walking animation
  });

  return (
    <group
      ref={group}
      dispose={null}
      position={position}
      // animations={animation}
      {...props}
    >
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="CharacterArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Root} />
          </group>
          <group name="Formad_Head" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Formad_Head_1"
              geometry={nodes.Formad_Head_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Formad_Head_1.skeleton}
            />
            <skinnedMesh
              name="Formad_Head_2"
              geometry={nodes.Formad_Head_2.geometry}
              material={materials.Red}
              skeleton={nodes.Formad_Head_2.skeleton}
            />
            <skinnedMesh
              name="Formad_Head_3"
              geometry={nodes.Formad_Head_3.geometry}
              material={materials.Brown}
              skeleton={nodes.Formad_Head_3.skeleton}
            />
          </group>
          <group name="Formal_Body" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Formal_Body_1"
              geometry={nodes.Formal_Body_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Formal_Body_1.skeleton}
            />
            <skinnedMesh
              name="Formal_Body_2"
              geometry={nodes.Formal_Body_2.geometry}
              material={materials.LimeGreen}
              skeleton={nodes.Formal_Body_2.skeleton}
            />
            <skinnedMesh
              name="Formal_Body_3"
              geometry={nodes.Formal_Body_3.geometry}
              material={materials.Gold}
              skeleton={nodes.Formal_Body_3.skeleton}
            />
          </group>
          <group name="Formal_Feet" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Formal_Feet_1"
              geometry={nodes.Formal_Feet_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Formal_Feet_1.skeleton}
            />
            <skinnedMesh
              name="Formal_Feet_2"
              geometry={nodes.Formal_Feet_2.geometry}
              material={materials.Red}
              skeleton={nodes.Formal_Feet_2.skeleton}
            />
          </group>
          <group name="Formal_Legs" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh
              name="Formal_Legs_1"
              geometry={nodes.Formal_Legs_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Formal_Legs_1.skeleton}
            />
            <skinnedMesh
              name="Formal_Legs_2"
              geometry={nodes.Formal_Legs_2.geometry}
              material={materials.LimeGreen}
              skeleton={nodes.Formal_Legs_2.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/women.glb');
