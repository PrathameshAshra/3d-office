/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 floor.glb -t 
*/

import * as THREE from 'three';
import React, { useRef, useState } from 'react';
import { useCursor, useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { ThreeEvent } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    mesh735054256: THREE.Mesh;
    mesh735054256_1: THREE.Mesh;
  };
  materials: {
    mat23: THREE.MeshStandardMaterial;
    mat21: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};
interface GLTFAction extends THREE.AnimationClip {
  name: '';
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

type FloorActions = {
  onClick: (event: ThreeEvent<MouseEvent>) => void;
};
const Floor = (props: JSX.IntrinsicElements['group'] & FloorActions) => {
  const { nodes, materials } = useGLTF('public/models/tile.glb') as GLTFResult;
  const { onClick } = props;
  const tileSize = 8;

  const tiles = [];
  for (let row = 0; row < tileSize; row++) {
    for (let col = 0; col < tileSize; col++) {
      tiles.push(
        <group
          key={`${row}-${col}`}
          position={[row, 0, col]}
          scale={[3, 1, 3]}
          {...props}
        >
          <mesh
            geometry={nodes.mesh735054256.geometry}
            material={materials.mat23}
          />
          <mesh
            geometry={nodes.mesh735054256_1.geometry}
            material={materials.mat21}
          />
        </group>
      );
    }
  }

  return (
    <group>
      {tiles}
      {/* <mesh
        rotation-x={-Math.PI / 2}
        position-y={-0.001}
        onClick={onClick}

        // onClick={(e) => setPosition([e.point.x, 0, e.point.z])}
      >
        <planeGeometry args={[10, 10]} />
        <meshStandardMaterial color="#f0f0f0" />
      </mesh> */}
    </group>
  );
};
export default Floor;
useGLTF.preload('/floor.glb');
